{"version":3,"sources":["components/CellItem.js","components/ColumnLine.js","components/Prealoader.js","components/EndGame.js","App.js","index.js"],"names":["CellItem","_ref","onClick","cell","className","react_default","a","createElement","figure","src","concat","alt","ColumnLine","column","selectedFigure","map","components_CellItem","key","index","classnames","black","bg","red","x","y","yellow","highlighted","Prealoader","_useState","useState","_useState2","Object","slicedToArray","readyToPlay","setReadyToPlay","setTimeout","Fragment","EndGame","winner","playAgain","winnerScreen","App","state","board","turn","path","componentWillMount","_this","initBoard","initFigures","selectCell","_this$state","indexOf","clearTable","setState","pawnRed","pawnBlack","king","myPoint","find","point","doesEnemyAtCell","ref","redFigures","blackFigures","forEach","row","wipeTheBoard","this","push","columns","doesCellExist","_this$state2","doesCellEmpty","_this2","_this$state3","checkFrom","initialRef","p","pawnContinuePath","drawHighlighting","direction","_this3","_this4","pawnCheckDirection","_this5","_this6","_this7","_this$state4","components_Prealoader","components_EndGame","columnIndex","components_ColumnLine","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.afde2d80.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CellItem = ({ onClick, cell, className }) => (\r\n  <div className={className} onClick={onClick}>\r\n    {cell.figure ? (\r\n      <img src={`images/${cell.figure}.png`} alt=\"figure\" />\r\n    ) : null}\r\n  </div>\r\n);\r\n\r\nexport default CellItem;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport CellItem from \"./CellItem\";\r\n\r\nconst ColumnLine = ({ column, selectedFigure, onClick }) => (\r\n  <section>\r\n    {column.map(cell => (\r\n      <CellItem\r\n        key={cell.index}\r\n        className={classnames(\r\n          { black: cell.bg === \"#333\" },\r\n          {\r\n            red: selectedFigure.x === cell.x && selectedFigure.y === cell.y\r\n          },\r\n          { yellow: cell.highlighted }\r\n        )}\r\n        onClick={() => onClick(cell.x, cell.y, cell.figure)}\r\n        cell={cell}\r\n      />\r\n    ))}\r\n  </section>\r\n);\r\n\r\nexport default ColumnLine;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Prealoader = () => {\r\n  const [readyToPlay, setReadyToPlay] = useState(false);\r\n\r\n  setTimeout(() => setReadyToPlay(true), 7000);\r\n\r\n  return (\r\n    <>\r\n      {readyToPlay ? null : (\r\n        <div className=\"Prealoader\">\r\n          <div className=\"content\">\r\n            <img src=\"images/logo.png\" className=\"logo\" alt=\"horse\" />\r\n            <p className=\"author\">\r\n              Author: <em>Alexander Vashchuk</em>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Prealoader;\r\n","import React from \"react\";\r\n\r\nconst EndGame = ({ winner, playAgain }) => {\r\n  let winnerScreen = \"\";\r\n\r\n  if (winner) {\r\n    winnerScreen = (\r\n      <div className=\"End-Game\">\r\n        <div className=\"content\">\r\n          <div className=\"end-game-text\">\r\n            {winner} Team Won:\r\n            <p className=\"small\">click down bellow to play again</p>\r\n          </div>\r\n          <button onClick={() => playAgain()} className=\"play-again-button\">\r\n            Play Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return winnerScreen;\r\n};\r\n\r\nexport default EndGame;\r\n","import React, { Component } from \"react\";\r\nimport \"./scss/main.css\";\r\n\r\nimport ColumnLine from \"./components/ColumnLine\";\r\nimport Prealoader from \"./components/Prealoader\";\r\nimport EndGame from \"./components/EndGame\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    board: [],\r\n    turn: \"red\",\r\n    selectedFigure: { x: null, y: null },\r\n    winner: null,\r\n    path: []\r\n  };\r\n\r\n  wipeTheBoard() {\r\n    let { board } = this.state;\r\n\r\n    board.map(column => column.map(row => (row.figure = \"\")));\r\n\r\n    this.setState({ board });\r\n  }\r\n\r\n  initBoard() {\r\n    // Initialization of the board\r\n    let { board } = this.state;\r\n    for (let x = 0; x < 8; x++) {\r\n      let row = [];\r\n      for (let y = 0; y < 8; y++) {\r\n        let index = x * 8 + y;\r\n        let bg = (x + y) % 2 ? \"#333\" : \"red\";\r\n        row.push({ x, y, index, bg, figure: \"\", highlighted: false });\r\n      }\r\n      board.push(row);\r\n    }\r\n    this.setState({ board });\r\n  }\r\n\r\n  initFigures() {\r\n    // Initialization of the figures\r\n    let { board } = this.state;\r\n\r\n    let blackTeam = [\r\n      [0, 0],\r\n      [2, 0],\r\n      [4, 0],\r\n      [6, 0],\r\n\r\n      [1, 1],\r\n      [3, 1],\r\n      [5, 1],\r\n      [7, 1],\r\n\r\n      [0, 2],\r\n      [2, 2],\r\n      [4, 2],\r\n      [6, 2]\r\n    ];\r\n\r\n    blackTeam.forEach(figure => {\r\n      board[figure[0]][figure[1]].figure = \"black-man\";\r\n    });\r\n\r\n    let redTeam = [\r\n      [1, 5],\r\n      [3, 5],\r\n      [5, 5],\r\n      [7, 5],\r\n\r\n      [0, 6],\r\n      [2, 6],\r\n      [4, 6],\r\n      [6, 6],\r\n\r\n      [1, 7],\r\n      [3, 7],\r\n      [5, 7],\r\n      [7, 7]\r\n    ];\r\n\r\n    redTeam.forEach(figure => {\r\n      board[figure[0]][figure[1]].figure = \"red-man\";\r\n    });\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    this.initBoard();\r\n    this.initFigures();\r\n  };\r\n\r\n  clearTable() {\r\n    let { board } = this.state;\r\n    board.map(columns => columns.map(cell => (cell.highlighted = false)));\r\n    this.setState({ board });\r\n  }\r\n\r\n  doesCellExist(x, y) {\r\n    if (x >= 0 && x <= 7 && y >= 0 && y <= 7) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  doesCellEmpty(x, y) {\r\n    const { board } = this.state;\r\n    if (this.doesCellExist(x, y)) {\r\n      if (board[x][y].figure === \"\") {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  doesEnemyAtCell(x, y) {\r\n    const { board, turn } = this.state;\r\n    if (this.doesCellExist(x, y) && !this.doesCellEmpty(x, y)) {\r\n      if (board[x][y].figure.indexOf(turn) < 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  drawHighlighting() {\r\n    const { board, path } = this.state;\r\n    path.forEach(point => {\r\n      if (this.doesCellEmpty(point.x, point.y)) {\r\n        board[point.x][point.y].highlighted = true;\r\n      }\r\n    });\r\n\r\n    this.setState({ board, path });\r\n  }\r\n\r\n  pawnContinuePath(x, y, checkFrom) {\r\n    const { path } = this.state;\r\n\r\n    let initialRef = path.find(p => p.x === x && p.y === y);\r\n    // Checking from Top Left\r\n    if (checkFrom !== \"Top Left\") {\r\n      if (\r\n        this.doesEnemyAtCell(x - 1, y - 1) &&\r\n        this.doesCellEmpty(x - 2, y - 2)\r\n      ) {\r\n        const index = path.push({ x: x - 1, y: y - 1, ref: initialRef });\r\n        path.push({ x: x - 2, y: y - 2, ref: path[index - 1] });\r\n\r\n        this.pawnContinuePath(x - 2, y - 2, \"Bottom Right\");\r\n      }\r\n    }\r\n    // Checking from Top Right\r\n    if (checkFrom !== \"Top Right\") {\r\n      if (\r\n        this.doesEnemyAtCell(x + 1, y - 1) &&\r\n        this.doesCellEmpty(x + 2, y - 2)\r\n      ) {\r\n        const index = path.push({ x: x + 1, y: y - 1, ref: initialRef });\r\n        path.push({ x: x + 2, y: y - 2, ref: path[index - 1] });\r\n        this.pawnContinuePath(x + 2, y - 2, \"Bottom Left\");\r\n      }\r\n    }\r\n    // Checking from Bottom Left\r\n    if (checkFrom !== \"Bottom Left\") {\r\n      if (\r\n        this.doesEnemyAtCell(x - 1, y + 1) &&\r\n        this.doesCellEmpty(x - 2, y + 2)\r\n      ) {\r\n        const index = path.push({ x: x - 1, y: y + 1, ref: initialRef });\r\n        path.push({ x: x - 2, y: y + 2, ref: path[index - 1] });\r\n        this.pawnContinuePath(x - 2, y + 2, \"Top Right\");\r\n      }\r\n    }\r\n    // Checking from Bottom Right\r\n    if (checkFrom !== \"Bottom Right\") {\r\n      if (\r\n        this.doesEnemyAtCell(x + 1, y + 1) &&\r\n        this.doesCellEmpty(x + 2, y + 2)\r\n      ) {\r\n        const index = path.push({ x: x + 1, y: y + 1, ref: initialRef });\r\n        path.push({ x: x + 2, y: y + 2, ref: path[index - 1] });\r\n        this.pawnContinuePath(x + 2, y + 2, \"Top Left\");\r\n      }\r\n    }\r\n\r\n    this.drawHighlighting();\r\n  }\r\n\r\n  pawnCheckDirection(x, y, path, direction) {\r\n    // Top Left\r\n    if (direction === \"Top Left\") {\r\n      if (this.doesCellEmpty(x - 1, y - 1)) {\r\n        path.push({ x: x - 1, y: y - 1, ref: { x, y, ref: \"\" } });\r\n      } else if (\r\n        this.doesEnemyAtCell(x - 1, y - 1) &&\r\n        this.doesCellEmpty(x - 2, y - 2)\r\n      ) {\r\n        const index = path.push({ x: x - 1, y: y - 1, ref: { x, y, ref: \"\" } });\r\n        path.push({ x: x - 2, y: y - 2, ref: path[index - 1] });\r\n        this.setState({ path }, () =>\r\n          this.pawnContinuePath(x - 2, y - 2, \"Bottom Right\")\r\n        );\r\n      }\r\n    }\r\n    // Top Right\r\n    if (direction === \"Top Right\") {\r\n      if (this.doesCellEmpty(x + 1, y - 1)) {\r\n        path.push({ x: x + 1, y: y - 1, ref: { x, y, ref: \"\" } });\r\n      } else if (\r\n        this.doesEnemyAtCell(x + 1, y - 1) &&\r\n        this.doesCellEmpty(x + 2, y - 2)\r\n      ) {\r\n        const index = path.push({ x: x + 1, y: y - 1, ref: { x, y, ref: \"\" } });\r\n        path.push({ x: x + 2, y: y - 2, ref: path[index - 1] });\r\n        this.setState({ path }, () =>\r\n          this.pawnContinuePath(x + 2, y - 2, \"Bottom Left\")\r\n        );\r\n      }\r\n    }\r\n    // Top Left\r\n    if (direction === \"Bottom Left\") {\r\n      if (this.doesCellEmpty(x - 1, y + 1)) {\r\n        path.push({ x: x - 1, y: y + 1, ref: { x, y, ref: \"\" } });\r\n      } else if (\r\n        this.doesEnemyAtCell(x - 1, y + 1) &&\r\n        this.doesCellEmpty(x - 2, y + 2)\r\n      ) {\r\n        const index = path.push({ x: x - 1, y: y + 1, ref: { x, y, ref: \"\" } });\r\n        path.push({ x: x - 2, y: y + 2, ref: path[index - 1] });\r\n        this.setState({ path }, () =>\r\n          this.pawnContinuePath(x - 2, y + 2, \"Top Right\")\r\n        );\r\n      }\r\n    }\r\n    // Top Left\r\n    if (direction === \"Bottom Right\") {\r\n      if (this.doesCellEmpty(x + 1, y + 1)) {\r\n        path.push({ x: x + 1, y: y + 1, ref: { x, y, ref: \"\" } });\r\n      } else if (\r\n        this.doesEnemyAtCell(x + 1, y + 1) &&\r\n        this.doesCellEmpty(x + 2, y + 2)\r\n      ) {\r\n        const index = path.push({ x: x + 1, y: y + 1, ref: { x, y, ref: \"\" } });\r\n        path.push({ x: x + 2, y: y + 2, ref: path[index - 1] });\r\n        this.setState({ path }, () =>\r\n          this.pawnContinuePath(x + 2, y + 2, \"Top Left\")\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  pawnRed(x, y) {\r\n    let path = [];\r\n\r\n    this.pawnCheckDirection(x, y, path, \"Top Left\");\r\n    this.pawnCheckDirection(x, y, path, \"Top Right\");\r\n\r\n    this.setState({ path }, () => this.drawHighlighting());\r\n  }\r\n  pawnBlack(x, y) {\r\n    let path = [];\r\n\r\n    this.pawnCheckDirection(x, y, path, \"Bottom Left\");\r\n    this.pawnCheckDirection(x, y, path, \"Bottom Right\");\r\n\r\n    this.setState({ path }, () => this.drawHighlighting());\r\n  }\r\n\r\n  king(x, y) {\r\n    let path = [];\r\n\r\n    this.pawnCheckDirection(x, y, path, \"Top Left\");\r\n    this.pawnCheckDirection(x, y, path, \"Top Right\");\r\n    this.pawnCheckDirection(x, y, path, \"Bottom Left\");\r\n    this.pawnCheckDirection(x, y, path, \"Bottom Right\");\r\n\r\n    this.setState({ path }, () => this.drawHighlighting());\r\n  }\r\n\r\n  selectCell = (x, y, figure) => {\r\n    let { board, selectedFigure, turn, path } = this.state;\r\n    if (figure && figure.indexOf(turn) >= 0) {\r\n      selectedFigure.x = x;\r\n      selectedFigure.y = y;\r\n      this.clearTable();\r\n      this.setState({ selectedFigure });\r\n      switch (figure) {\r\n        case \"red-man\":\r\n          this.pawnRed(x, y);\r\n          break;\r\n        case \"black-man\":\r\n          this.pawnBlack(x, y);\r\n          break;\r\n        case \"red-king\":\r\n          this.king(x, y);\r\n          break;\r\n        case \"black-king\":\r\n          this.king(x, y);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    // Clicked cell\r\n    if (board[x][y].highlighted) {\r\n      // Kill figures\r\n      let myPoint = path.find(point => point.x === x && point.y === y);\r\n      board[myPoint.x][myPoint.y].figure = \"\";\r\n      if (this.doesEnemyAtCell(myPoint.x, myPoint.y)) {\r\n        board[myPoint.x][myPoint.y].figure = \"\";\r\n      }\r\n\r\n      // from pawn to king\r\n      if (\r\n        myPoint.y === 0 &&\r\n        board[selectedFigure.x][selectedFigure.y].figure.indexOf(\"red-man\") >= 0\r\n      ) {\r\n        board[selectedFigure.x][selectedFigure.y].figure = \"red-king\";\r\n      }\r\n      if (\r\n        myPoint.y === 7 &&\r\n        board[selectedFigure.x][selectedFigure.y].figure.indexOf(\"black-man\") >=\r\n          0\r\n      ) {\r\n        board[selectedFigure.x][selectedFigure.y].figure = \"black-king\";\r\n      }\r\n\r\n      while (myPoint.ref) {\r\n        myPoint = myPoint.ref;\r\n\r\n        // from pawn to king\r\n        if (\r\n          myPoint.y === 0 &&\r\n          board[selectedFigure.x][selectedFigure.y].figure.indexOf(\"red-man\") >=\r\n            0\r\n        ) {\r\n          board[selectedFigure.x][selectedFigure.y].figure = \"red-king\";\r\n        }\r\n        if (\r\n          myPoint.y === 7 &&\r\n          board[selectedFigure.x][selectedFigure.y].figure.indexOf(\r\n            \"black-man\"\r\n          ) >= 0\r\n        ) {\r\n          board[selectedFigure.x][selectedFigure.y].figure = \"black-king\";\r\n        }\r\n\r\n        if (this.doesEnemyAtCell(myPoint.x, myPoint.y)) {\r\n          board[myPoint.x][myPoint.y].figure = \"\";\r\n        }\r\n      }\r\n\r\n      // Win Case\r\n      let redFigures = 0;\r\n      let blackFigures = 0;\r\n      board.forEach(column =>\r\n        column.forEach(row => {\r\n          if (row.figure.indexOf(\"red\") >= 0) {\r\n            redFigures++;\r\n          }\r\n          if (row.figure.indexOf(\"black\") >= 0) {\r\n            blackFigures++;\r\n          }\r\n        })\r\n      );\r\n\r\n      if (redFigures === 0) {\r\n        this.setState({ winner: \"black\" });\r\n      }\r\n      if (blackFigures === 0) {\r\n        this.setState({ winner: \"red\" });\r\n      }\r\n\r\n      turn = turn === \"red\" ? \"black\" : \"red\"; // change turn after the move\r\n      board[x][y].figure = board[selectedFigure.x][selectedFigure.y].figure;\r\n      board[selectedFigure.x][selectedFigure.y].figure = \"\";\r\n\r\n      this.clearTable();\r\n      this.setState({ turn, board, selectedFigure: { x: null, y: null } });\r\n    }\r\n  };\r\n\r\n  playAgain = () => {\r\n    this.wipeTheBoard();\r\n    this.initFigures();\r\n    this.setState({\r\n      winner: null,\r\n      turn: \"red\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { board, selectedFigure, winner } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Prealoader />\r\n        <EndGame winner={winner} playAgain={this.playAgain} />\r\n        <div className=\"grid\">\r\n          {board.map((column, columnIndex) => (\r\n            <ColumnLine\r\n              key={columnIndex}\r\n              column={column}\r\n              selectedFigure={selectedFigure}\r\n              onClick={this.selectCell}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}